#!/usr/bin/python

import sys
import curses
import os
import locale
args = sys.argv
locale.setlocale(locale.LC_ALL,'en_US.UTF-8')
MAX_ENTRY_COUNT = 4096

def usage():#{{{
    print 'usage: search [command] file\r'
    print '    - If command is not specified, the default program will be called.\r'
    print '    - In the file list, press enter to select, UP/DOWN to navigate, q/ESC to quit.\r'
#}}}

def select(results): #{{{
    count = len(results)
    maxLen = 1
    for entry in results:
        if len(entry) > maxLen:
            maxLen = len(entry)

    screen = curses.initscr()
    pad = curses.newpad(count+1, maxLen+1)
    curses.noecho()
    curses.curs_set(0)
    screen.keypad(1)

    for i in xrange(0, count):
        pad.addstr(i,0, results[i])

    h,w = screen.getmaxyx()
    top = 0
    line = 0
    horizontal_offset = 0

    #Needed to somehow 'activate' the screen. Otherwise won't update after the first pad.refresh
    screen.redrawwin()
    screen.refresh()

    while True:
        pad.addstr(line, 0, results[line], curses.A_REVERSE)
        pad.refresh(top, horizontal_offset, 0,0,h-1, w-1)
        key = screen.getch()
        pad.addstr(line, 0, results[line], curses.A_NORMAL)
        pad.refresh(top,horizontal_offset,0,0,h-1, w-1)


        if key == curses.KEY_UP or key == ord('k'):
            line = line - 1
        if key == curses.KEY_DOWN or key == ord('j'):
            line = line + 1
        if key == curses.KEY_LEFT or key == ord('h'):
            horizontal_offset = horizontal_offset - 1
            if horizontal_offset < 0:
                horizontal_offset = 0
        if key == curses.KEY_RIGHT or key == ord('l'):
           horizontal_offset = horizontal_offset + 1
           if horizontal_offset >= maxLen:
               horizontal_offset = maxLen - 1
        if key == curses.KEY_NPAGE or key == 6:#6 for ^F
            line += h
        if key == curses.KEY_PPAGE or key == 2:#2 for ^B
            line -= h
        if key == ord('\n') or key == curses.KEY_ENTER:
            break
        if key == 27 or key==ord('q'): #27 for ESC
            screen.clear()
            line = -1
            break
        if line < 0:
            line = 0
        if line >= count:
            line = count - 1
        if line < top:
            top = line
        if line - top >= h:
            top = line - h + 1

    curses.endwin()
    curses.echo()
    curses.curs_set(1)

    return line
#}}}

def invoke_search_backend(target):#{{{
    
    if os.system("command -v mdfind > /dev/null") == 0:
        pipe = os.popen('mdfind "'+target+'" | head -n '+str(MAX_ENTRY_COUNT))
        return pipe.readlines()

    if os.system("command -v tracker-search > /dev/null") == 0:
        pipe = os.popen('tracker-search --limit='+str(MAX_ENTRY_COUNT)+' "'+target+'"')
        return [fstr.strip()[7:] for fstr in pipe.readlines() if fstr.strip().startswith("file://")]

    return "no backend"

#}}}

def search(tmp, target, cmd):#{{{
    ret = invoke_search_backend(target)

    if ret == "no backend":
        print 'No compatible backend is found.'
        return

    if cmd == 'cd' or cmd.startswith("cd "):
        #pick directories only
        ret = [entry for entry in ret if os.path.isdir(entry.strip())]
    if len(ret)==0:
        print 'Nothing found.'
        sys.exit(-1)
    choice = select(ret)
    if choice == -1:
        return

    if cmd == '':
        cmd = 'open'

    cmd_string = cmd+' "'+ret[choice].strip() + '"'
    cmd_file = open(tmp, "w")
    cmd_file.write(cmd_string)
    cmd_file.close()
#}}}

# main

if len(args)<3:
    usage()
    sys.exit(-1)
else:
    args.pop(0)
    tmp = args.pop(0)
    target = args.pop()
    cmd = ' '.join(args)
    search(tmp, target, cmd)
